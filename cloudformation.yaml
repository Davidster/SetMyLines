---
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Serverless Express Application/API powered by API Gateway and Lambda
Globals:
  Function:
    Runtime: nodejs8.10
    Timeout: 30
    Handler: lambda.handler
    MemorySize: 1024
    Layers:
      - !Ref SetMyLinesLib
    Environment:
      Variables:
        USER_INFO_TABLE_NAME: !Ref SetMyLinesUserInfo
        LIB_PATH: "/opt/common"
        SITE_DOMAIN: !GetAtt CloudFrontDistribution.DomainName
        CF_STACK_NAME: !Sub ${AWS::StackName}

Resources:
  StaticClientBucket:
    Type: AWS::S3::Bucket

  StaticClientBucketAccessPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticClientBucket
      PolicyDocument:
        Version: 2012-10-17
        Id: PublicPolicy
        Statement:
          - Sid: ListObjects
            Action:
              - s3:ListBucket
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontS3AccessIdentity.S3CanonicalUserId
            Resource: !GetAtt StaticClientBucket.Arn
          - Sid: ReadObjects
            Action:
              - s3:GetObject
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt CloudFrontS3AccessIdentity.S3CanonicalUserId
            Resource:
              - !Sub [ "${StaticClientBucketArn}/*", { StaticClientBucketArn: !GetAtt StaticClientBucket.Arn } ]

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Enabled: true
        DefaultRootObject: index.html
        CustomErrorResponses:
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html
        Aliases:
          - setmylines.com
        Origins:
          - DomainName: !GetAtt StaticClientBucket.DomainName
            Id: cloudFrontS3Origin
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${CloudFrontS3AccessIdentity}
        ViewerCertificate:
          AcmCertificateArn: "arn:aws:acm:us-east-1:171337445867:certificate/95b803fe-8a1b-4de9-98fd-cf8ca842311b"
          SslSupportMethod: sni-only
        DefaultCacheBehavior:
          TargetOriginId: cloudFrontS3Origin
          ViewerProtocolPolicy: redirect-to-https
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none

  CloudFrontS3AccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "Identity used by CloudFront to access the S3 bucket: ${StaticClientBucket}"

  ApiGatewayApi:
    Type: AWS::Serverless::Api
    Properties:
      DefinitionUri: ./simple-proxy-api.yaml
      StageName: prod
      Variables:
        ApiHandlerLambdaName: !Ref SetMyLinesAPIHandler

  SetMyLinesLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BasicLambdaExecution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: invokeMaxFlowLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt MaxFlowMinCostHandler.Arn
      - PolicyName: readWriteUserInfo
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:GetItem
            - dynamodb:DeleteItem
            - dynamodb:PutItem
            Resource: !GetAtt SetMyLinesUserInfo.Arn
      - PolicyName: manageSES
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - ses:*
            Resource: "*"

  MaxFlowLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BasicLambdaExecution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*

  SubscriptionLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: BasicLambdaExecution
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
      - PolicyName: invokeMaxFlowLambda
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource: !GetAtt MaxFlowMinCostHandler.Arn
      - PolicyName: scanAllUserInfo
        PolicyDocument:
          Version: "2012-10-17"
          Statement:
          - Effect: Allow
            Action:
            - dynamodb:Scan
            Resource: !GetAtt SetMyLinesUserInfo.Arn

  SetMyLinesApiGatewayExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SetMyLinesAPIHandler.Arn
      Principal: apigateway.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":"
          - !Ref ApiGatewayApi
          - "/*/*"

  SubscriptionLambdaExecutionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !GetAtt SubscriptionHandler.Arn
      Principal: events.amazonaws.com
      SourceArn: !Join
        - ''
        - - 'arn:aws:events:'
          - !Ref AWS::Region
          - ":"
          - !Ref AWS::AccountId
          - ":rule/"
          - !Ref SubscriptionTrigger

  SetMyLinesAPIHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/services/apiHandler/
      Role: !GetAtt SetMyLinesLambdaRole.Arn
      Environment:
        Variables:
          MAXFLOW_LAMBDA_NAME: !Ref MaxFlowMinCostHandler
      Events:
        ProxyApiRoot:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /
            Method: ANY
        ProxyApiGreedy:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGatewayApi
            Path: /{proxy+}
            Method: ANY

  SetMyLinesLib:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./backend/lib/
      CompatibleRuntimes:
        - nodejs8.10

  MaxFlowMinCostHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/services/maxFlow/lambda.zip
      Role: !GetAtt MaxFlowLambdaRole.Arn
      Runtime: python3.6

  SubscriptionHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/services/rosterUpdaterJob/
      Timeout: 900
      Role: !GetAtt SubscriptionLambdaRole.Arn
      Environment:
        Variables:
          MAXFLOW_LAMBDA_NAME: !Ref MaxFlowMinCostHandler

  CustomEmailVerificationHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: ./backend/services/customEmailVerification/
      Role: !GetAtt SetMyLinesLambdaRole.Arn

  CustomEmailVerification:
    Type: Custom::LoadLambda
    Properties:
      ServiceToken: !GetAtt CustomEmailVerificationHandler.Arn
      DummyProp: UsedForUpdates

  SubscriptionTrigger:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: "cron(0 11 * * ? *)"
      Targets:
        - Arn: !GetAtt SubscriptionHandler.Arn
          Id: "SubscriptionHandlerCWETarget"

  DomainRecordSet:
    Type: AWS::Route53::RecordSet
    Properties:
      Type: A
      Name: setmylines.com
      HostedZoneName: setmylines.com.
      AliasTarget:
        DNSName: !GetAtt CloudFrontDistribution.DomainName
        HostedZoneId: Z2FDTNDATAQYW2

  SetMyLinesUserInfo:
    Type: AWS::DynamoDB::Table
    Properties:
      BillingMode: "PAY_PER_REQUEST"
      TableName: "SetMyLinesUserInfo"
      AttributeDefinitions:
        - AttributeName: "userID"
          AttributeType: "S"
      KeySchema:
        - AttributeName: "userID"
          KeyType: "HASH"

Outputs:
  ExpressAppLambdaConsoleUrl:
    Description: Console URL for the express app Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${SetMyLinesAPIHandler}

  MaxFlowLambdaConsoleUrl:
    Description: Console URL for the max flow min cost calculation Lambda Function.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/lambda/home?region=${AWS::Region}#/functions/${MaxFlowMinCostHandler}

  ApiGatewayApiConsoleUrl:
    Description: Console URL for the API Gateway API's Stage.
    Value: !Sub https://${AWS::Region}.console.aws.amazon.com/apigateway/home?region=${AWS::Region}#apis/${ApiGatewayApi}/stages/prod

  ApiUrl:
    Description: Url of API
    Value: !Sub https://${ApiGatewayApi}.execute-api.${AWS::Region}.amazonaws.com/prod/
      
  StaticClientBucketName:
    Description: Name of the S3 bucket which holds the static frontend assets
    Value: !Ref StaticClientBucket

  UserInfoTableName:
    Description: Envriroment variable USER_INFO_TABLE_NAME
    Value: !Ref SetMyLinesUserInfo

  CfStackName:
    Description: Envriroment variable CF_STACK_NAME
    Value: !Sub ${AWS::StackName}
  
